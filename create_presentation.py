from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
import os

def create_content_moderation_presentation():
    """Create a PowerPoint presentation for the Content Moderation ADK project."""
    
    # Create presentation
    prs = Presentation()
    
    # Slide 1: Objective and Problem
    slide1 = prs.slides.add_slide(prs.slide_layouts[1])  # Title and Content layout
    title1 = slide1.shapes.title
    title1.text = "üéØ Objective & Problem Statement"
    
    content1 = slide1.placeholders[1]
    content1.text = """üîç PROBLEM STATEMENT:
‚Ä¢ Manual content moderation is time-consuming and error-prone
‚Ä¢ Need for automated detection of inappropriate content
‚Ä¢ Multiple violation types require different detection approaches
‚Ä¢ Lack of comprehensive confidence scoring system

üéØ OBJECTIVES:
‚Ä¢ Develop automated content moderation pipeline
‚Ä¢ Detect multiple violation types: nudity, violence, drugs, alcohol, hate symbols, PII, QR codes
‚Ä¢ Implement confidence-based decision making
‚Ä¢ Create scalable and efficient moderation system
‚Ä¢ Provide detailed reporting and analysis

üìä CHALLENGES:
‚Ä¢ Balancing accuracy vs. speed
‚Ä¢ Handling edge cases and exceptions
‚Ä¢ Managing false positives/negatives
‚Ä¢ Integrating multiple AI models effectively"""

    # Slide 2: Solution
    slide2 = prs.slides.add_slide(prs.slide_layouts[1])
    title2 = slide2.shapes.title
    title2.text = "üõ°Ô∏è Solution Overview"
    
    content2 = slide2.placeholders[1]
    content2.text = """üîß CORE SOLUTION:
‚Ä¢ Multi-agent content moderation pipeline
‚Ä¢ Hybrid approach: NudeNet + Gemini Vision AI
‚Ä¢ Confidence-based decision making system
‚Ä¢ Comprehensive violation detection

üß© AGENT COMPONENTS:
‚Ä¢ Ingestion Agent: Image preprocessing and validation
‚Ä¢ Nudity Detection: NudeNet for accurate nudity detection
‚Ä¢ Nudity Exceptions: Gemini for context-aware exceptions
‚Ä¢ Violence Detection: Gemini Vision for blood, weapons, gore
‚Ä¢ Drugs Detection: Gemini Vision for paraphernalia
‚Ä¢ Alcohol/Smoking: Gemini Vision for substance detection
‚Ä¢ Hate Symbols: Gemini Vision for extremist content
‚Ä¢ PII/Text Detection: Gemini Vision for personal information
‚Ä¢ QR Code Detection: Gemini Vision for embedded codes

‚ö° KEY FEATURES:
‚Ä¢ Real-time processing capabilities
‚Ä¢ Detailed confidence scoring
‚Ä¢ Comprehensive reporting system
‚Ä¢ Scalable architecture
‚Ä¢ Exception handling and edge case management"""

    # Slide 3: Architecture Overview
    slide3 = prs.slides.add_slide(prs.slide_layouts[1])
    title3 = slide3.shapes.title
    title3.text = "üèóÔ∏è Architecture Overview"
    
    content3 = slide3.placeholders[1]
    content3.text = """üìã PIPELINE ARCHITECTURE:

1Ô∏è‚É£ INGESTION LAYER:
   ‚Ä¢ Image preprocessing and validation
   ‚Ä¢ Format conversion and optimization
   ‚Ä¢ Quality assessment

2Ô∏è‚É£ DETECTION LAYER:
   ‚Ä¢ NudeNet: Primary nudity detection
   ‚Ä¢ Gemini Vision: Context-aware analysis
   ‚Ä¢ Multi-modal violation detection

3Ô∏è‚É£ ANALYSIS LAYER:
   ‚Ä¢ Confidence score calculation
   ‚Ä¢ Violation type classification
   ‚Ä¢ Decision logic processing

4Ô∏è‚É£ OUTPUT LAYER:
   ‚Ä¢ Final decision (Accept/Reject/Flag)
   ‚Ä¢ Detailed reporting
   ‚Ä¢ JSON export capabilities

üîÑ PROCESS FLOW:
Image Input ‚Üí Preprocessing ‚Üí Multi-Agent Detection ‚Üí 
Confidence Analysis ‚Üí Decision Making ‚Üí Report Generation

üìä CONFIDENCE SYSTEM:
‚Ä¢ 0.9: Very High (Strong evidence)
‚Ä¢ 0.8: High (Reliable detection)
‚Ä¢ 0.6: Medium-High (Good evidence)
‚Ä¢ 0.5: Medium (Needs review)
‚Ä¢ 0.4: Medium-Low (Weak evidence)
‚Ä¢ 0.1: Low (Safe content)
‚Ä¢ 0.0: Error (Manual review)"""

    # Slide 4: Pipeline Diagram
    slide4 = prs.slides.add_slide(prs.slide_layouts[5])  # Title Only layout
    title4 = slide4.shapes.title
    title4.text = "üîÑ Moderation Pipeline Flow"

    # Draw blocks and arrows
    left = Inches(0.5)
    top = Inches(2)
    width = Inches(1.6)
    height = Inches(0.8)
    gap = Inches(0.3)

    stages = [
        "Image Input",
        "Ingestion",
        "Multi-Agent Detection\n(Nudity, Violence, Drugs, etc.)",
        "Confidence Analysis",
        "Decision",
        "Report"
    ]

    shapes = slide4.shapes
    block_shapes = []
    for i, stage in enumerate(stages):
        block = shapes.add_shape(
            1,  # Rectangle
            left + i * (width + gap),
            top,
            width,
            height
        )
        block.text = stage
        block.text_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        block.text_frame.paragraphs[0].font.size = Pt(14)
        block.text_frame.paragraphs[0].font.bold = True
        block.fill.solid()
        block.fill.fore_color.rgb = RGBColor(0x4F, 0x81, 0xBD)
        block.line.color.rgb = RGBColor(0, 0, 0)
        block_shapes.append(block)
        # Add arrow except after last block
        if i < len(stages) - 1:
            arrow = shapes.add_connector(
                2,  # Arrow
                left + (i + 1) * (width + gap) - gap,
                top + height / 2 - 0.05,
                gap,
                0.1
            )
            arrow.line.color.rgb = RGBColor(0, 0, 0)

    # Slide 5: Efficiency Metrics
    slide5 = prs.slides.add_slide(prs.slide_layouts[1])
    title5 = slide5.shapes.title
    title5.text = "üìà Efficiency Metrics"
    
    content5 = slide5.placeholders[1]
    content5.text = """üéØ PERFORMANCE METRICS:

‚ö° SPEED & EFFICIENCY:
‚Ä¢ Real-time processing: < 30 seconds per image
‚Ä¢ Parallel agent execution capability
‚Ä¢ Optimized image preprocessing
‚Ä¢ Efficient API integration

üéØ ACCURACY METRICS:
‚Ä¢ NudeNet: Industry-standard nudity detection
‚Ä¢ Gemini Vision: Advanced context understanding
‚Ä¢ Confidence-based decision making
‚Ä¢ Reduced false positive/negative rates

üìä DETECTION CAPABILITIES:
‚Ä¢ Nudity: 95%+ accuracy with NudeNet
‚Ä¢ Violence: Multi-category detection (blood, weapons, gore)
‚Ä¢ Drugs: Paraphernalia and substance detection
‚Ä¢ Alcohol/Smoking: Context-aware substance detection
‚Ä¢ Hate Symbols: Symbol and extremist content detection
‚Ä¢ PII: Personal information and text extraction
‚Ä¢ QR Codes: Embedded code detection

üîÑ SCALABILITY:
‚Ä¢ Modular agent architecture
‚Ä¢ Easy addition of new detection types
‚Ä¢ Configurable confidence thresholds
‚Ä¢ Exportable results for analysis

üìã REPORTING FEATURES:
‚Ä¢ Comprehensive JSON reports
‚Ä¢ Confidence score breakdown
‚Ä¢ Violation type classification
‚Ä¢ Decision rationale explanation"""

    # Save the presentation
    output_path = "Content_Moderation_ADK_Presentation.pptx"
    prs.save(output_path)
    print(f"‚úÖ Presentation created successfully: {output_path}")
    print(f"üìÅ Location: {os.path.abspath(output_path)}")
    
    return output_path

if __name__ == "__main__":
    create_content_moderation_presentation() 